<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>非标准自动化测试工作日记----Day 1</title>
    <url>/2023/08/07/day1/</url>
    <content><![CDATA[<p><u><strong>-Day 1</strong></u><br><u><strong>author:  xizhao</strong></u></p>
<ul>
<li><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2></li>
</ul>
<blockquote>
<p>VBScript语言提供了两个语句和一个对象来处理”运行时错误”，如下所示：</p>
<blockquote>
<p><code>On Error Resume Next</code>语句</p>
</blockquote>
<blockquote>
<p><code>On Error Goto 0</code>语句</p>
</blockquote>
<blockquote>
<p><code>Err</code>对象</p>
</blockquote>
<p>简单介绍一下On Error Resume Next，On Error Goto 0，Err这三者</p>
<p>On Error Resume Next语句和On Error Goto 0语句指明了当出现”运行时错误”时的处理方式。</p>
<p>当加上On Error Resume Next语句后，如果后面的程序出现”运行时错误”时，会继续运行，不中断。</p>
<p>当加上On Error Goto 0语句后，如果后面的程序出现”运行时错误”时，会显示”出错信息”并停止程序的行。</p>
<p>Err对象保存了“错误信息”</p>
</blockquote>
<ul>
<li><h2 id="Byval函数和Byref函数"><a href="#Byval函数和Byref函数" class="headerlink" title="Byval函数和Byref函数"></a>Byval函数和Byref函数</h2></li>
</ul>
<blockquote>
<p> 1、<code>ByVal</code>传值：一种将参数值而不是将地址传递给过程的方式，这就使过程访问到变量的复本。结果，过程 不可改变变量的真正值。<br> 2、<code>ByRef</code>传值：一种将参数地址而不是将值传递给过程的方式，这就使过程访问到实际的变量。结果，过程可改变变量的真正值。除非另作说明，否则按地址传递参数。<br> 3、系统默认的是ByRef传值。    </p>
</blockquote>
<ul>
<li><h2 id="如何确定当前画面的编号和画面名称？"><a href="#如何确定当前画面的编号和画面名称？" class="headerlink" title="如何确定当前画面的编号和画面名称？"></a>如何确定当前画面的编号和画面名称？</h2></li>
</ul>
<blockquote>
<p>通过预定义 VB 函数 “HmiRuntime.BaseScreenName ” 的返回值提供了当前画面的名字。</p>
<blockquote>
<p>HmiRuntime.<code>BaseScreenName          </code>将”xxxxx”设置为图形系统的初始画面<br>HMIRuntime.<code>Screens                 </code>Screens对象可以访问指定的画面，并可设置其属性<br>HMIRuntime.Screens().<code>PictureName   </code>PictureName  更改画面窗口对象</p>
</blockquote>
<p>例子：</p>
<blockquote>
<p>HMIRuntime.Screens(Basename).ScreenItems(“frm.main”).<code>PictureName </code>&#x3D; “Project\ui_para.PDL”<br>Set screenname&#x3D;HMIRuntime.<code>Screens</code>(“Home1”) &#x2F;&#x2F;获取要操作的窗体<br>Set pwname&#x3D;screenname.<code>ScreenItems</code>(“画面窗口2”) &#x2F;&#x2F;获取要操作的控件，这里填入你要操作的控件名<br>Set opObject&#x3D;HMIRuntime.Screens (“Home1”).<code>ScreenItems</code>(“画面窗口2”)<br>opObject.<code>PictureName</code>&#x3D;”Page1.Pdl”            &#x2F;&#x2F;更改画面窗口对象</p>
</blockquote>
</blockquote>
<ul>
<li><h2 id="字符串函数："><a href="#字符串函数：" class="headerlink" title="字符串函数："></a>字符串函数：</h2></li>
</ul>
<blockquote>
<p><code>mid</code>(str,起始字符，[读取长度])：截取字符串中间子字符串<br><code>left</code>(str,nlen)：从左边起截取nlen长度子字符串<br><code>right</code>(str,nlen)：从右边起截取nlen长度子字符串<br><code>trim</code>(str)：去除字符串两端空格<br><code>Ltrim</code>(str)：去除字符串左侧空格<br><code>Rtrim</code>(str)：去除字符串右侧空格</p>
</blockquote>
<ul>
<li><h2 id="IsNumeric-函数"><a href="#IsNumeric-函数" class="headerlink" title="IsNumeric 函数"></a>IsNumeric 函数</h2></li>
</ul>
<blockquote>
<p>返回 Boolean 值指明表达式的值是否为数字。<br>expression 参数可以是任意表达式。</p>
<blockquote>
<p>说明<br>如果整个 expression 被识别为数字，<code>IsNumeric </code>函数返回 True；否则函数返回 False。如果 expression 是日期表达式，<code>IsNumeric </code>函数返回 False。</p>
</blockquote>
</blockquote>
<ul>
<li><h2 id="SQL语句拆分理解"><a href="#SQL语句拆分理解" class="headerlink" title="SQL语句拆分理解"></a>SQL语句拆分理解</h2></li>
</ul>
<blockquote>
<p>vbs中SQL语句结构拆分【  ‘ “ &amp; &amp; ” ’ 】<br>SQLStr &#x3D; </p>
<p>“UPDATE [dbo].[T_Product_info]<br>SET [UserID] &#x3D;<br>‘“&amp;GetTagValue(“UserID”)&amp;”‘<br>,<br>[Name] &#x3D;<br>‘“&amp;Var_Name&amp;”‘<br>,<br>[UpdTime] &#x3D; GETDATE() WHERE<br>[Parttype] &#x3D; ‘“&amp;AParttype&amp;”‘;”</p>
</blockquote>
<ul>
<li><h2 id="实战【代码片段】"><a href="#实战【代码片段】" class="headerlink" title="实战【代码片段】"></a>实战【代码片段】</h2></li>
</ul>
<h3 id="1-lsNumeric-AParttype-和Len-AParttype-gt-0"><a href="#1-lsNumeric-AParttype-和Len-AParttype-gt-0" class="headerlink" title="1. lsNumeric(AParttype)和Len(AParttype) &gt; 0"></a>1. <strong>lsNumeric(AParttype)和Len(AParttype) &gt; 0</strong></h3><blockquote>
<p>这是一个条件语句，根据两个条件进行判断：**<code>IsNumeric</code>**(AParttype)和Len(AParttype) &gt; 0。</p>
<blockquote>
<p><code>IsNumeric(AParttype)</code>用于判断变量AParttype的值是否为数值类型。当AParttype可以被解析为数值时，IsNumeric(AParttype)的结果为True；否则，结果为False。这个条件用于确保AParttype的值是一个数值，而不是其他类型（如字符串）。</p>
</blockquote>
<blockquote>
<p><code>Len(AParttype) &gt; 0</code>用于判断变量AParttype的值的长度是否大于0。当AParttype的值的长度大于0时，即AParttype不为空字符串，则Len(AParttype) &gt; 0的结果为True；否则，结果为False。这个条件用于确保AParttype的值不为空。</p>
</blockquote>
</blockquote>
<h3 id="2-ReturnExecuteSQL-SQLStr-amp-ProcessStr-gt-x3D-1"><a href="#2-ReturnExecuteSQL-SQLStr-amp-ProcessStr-gt-x3D-1" class="headerlink" title="2. ReturnExecuteSQL(SQLStr&amp;ProcessStr) &gt;&#x3D; 1"></a>2. <strong>ReturnExecuteSQL(SQLStr&amp;ProcessStr) &gt;&#x3D; 1</strong></h3><blockquote>
<p>ReturnExecuteSQL(SQLStr&amp;ProcessStr) &gt;&#x3D; 1 是一个条件判断语句，用于判断执行一个SQL语句后是否有至少一条受影响的记录。</p>
<blockquote>
<p>在这个语句中，ReturnExecuteSQL 是一个自定义的函数或方法，它接受一个字符串类型的参数 SQLStr&amp;ProcessStr，其中 SQLStr 是一个SQL语句，ProcessStr 是一个处理字符串。</p>
</blockquote>
<blockquote>
<p>执行 ReturnExecuteSQL(SQLStr&amp;ProcessStr) 将返回一个值，并与数字 1 进行比较。如果返回的值大于等于 1，则条件成立，即至少有一条记录受到了影响；如果返回的值小于 1，则条件不成立，即没有记录受到影响。</p>
</blockquote>
<blockquote>
<p>这个判断条件的具体含义和背景需要根据代码上下文和具体实现来确定。一般情况下，这样的条件判断可用于判断数据库操作是否成功、是否有符合条件的数据等。</p>
</blockquote>
</blockquote>
<h3 id="3-字符串拼接【项目代码片段】"><a href="#3-字符串拼接【项目代码片段】" class="headerlink" title="3. 字符串拼接【项目代码片段】"></a>3. 字符串拼接【项目代码片段】</h3><blockquote>
<p>If ProcessStr &#x3D; “” Then<br>                    ProcessStr &#x3D; “delete [dbo].[T_Process] WHERE [Parttype] &#x3D; ‘“&amp;AParttype&amp;”‘;” &amp; _<br>                            “ INSERT INTO [dbo].[T_Process] “ &amp; _<br>                            “([Parttype],[Station],[IsEnable],[OPNum]) “ &amp; _<br>                            “VALUES(“&amp;AParttype&amp;”,’”&amp;Station&amp;”‘,”&amp;IsEnable&amp;”,”&amp;OPNum&amp;”)”<br>                Else<br>                    ProcessStr &#x3D; ProcessStr &amp; “,(“&amp;AParttype&amp;”,’”&amp;Station&amp;”‘,”&amp;IsEnable&amp;”,”&amp;OPNum&amp;”)”<br>                End If</p>
</blockquote>
<blockquote>
<p>解析</p>
</blockquote>
<blockquote>
<p>这段代码是一个条件语句，根据<code>ProcessStr</code>的值进行不同的操作。</p>
<ol>
<li><p>首先，判断<code>ProcessStr</code>是否为空字符串，即<code>If ProcessStr = &quot;&quot; Then</code>。</p>
</li>
<li><p>如果</p>
</li>
</ol>
<p>  ProcessStr</p>
<p>  为空字符串，则执行以下操作：</p>
<ul>
<li>将一个DELETE语句和一个INSERT语句拼接到字符串<code>ProcessStr</code>中。DELETE语句用于删除具有特定条件的表<code>[dbo].[T_Process]</code>中的记录，条件是<code>[Parttype] = &#39;某个值&#39;</code>，其中的某个值是通过变量<code>AParttype</code>传递的。</li>
<li>INSERT语句用于向表<code>[dbo].[T_Process]</code>中插入一条新记录，包含四个列：<code>[Parttype]</code>、<code>[Station]</code>、<code>[IsEnable]</code>和<code>[OPNum]</code>。这些列的值分别通过相关变量<code>AParttype</code>、<code>Station</code>、<code>IsEnable</code>和<code>OPNum</code>传递。</li>
</ul>
<ol start="3">
<li>如果</li>
</ol>
<p>  ProcessStr</p>
<p>  不为空字符串，则执行以下操作：</p>
<p>  ​    将一条用逗号分隔的插入语句添加到<code>ProcessStr</code>字符串末尾。这个    插入语句与上述的INSERT语句类似，也是向表<code>[dbo].[T_Process]</code>    中插入一条新记录，各列的值同样由对应的变量提供。</p>
<p>这段代码的目的是根据<code>ProcessStr</code>的值动态生成SQL语句，并根据条件执行不同的操作。如果<code>ProcessStr</code>为空，则生成带有DELETE和INSERT语句的字符串；如果<code>ProcessStr</code>不为空，则在已有的字符串末尾添加新的插入语句。</p>
</blockquote>
<h3 id="4-循环结束"><a href="#4-循环结束" class="headerlink" title="4. 循环结束"></a>4. 循环结束</h3><blockquote>
<p>项目代码</p>
</blockquote>
<blockquote>
<p>If  ReturnExecuteSQL(SQLStr&amp;ProcessStr) &gt;&#x3D; 1 Then<br>       ScreenItems.Item(“AParttype”).Text &#x3D; “”<br>       Msgbox “保存完成。”<br>       ScreenItems.Item(“AParttype”).Text &#x3D; AParttype<br>   Else<br>       Msgbox “保存失败，请联系管理员。” &amp; err.description<br>   End If</p>
</blockquote>
<blockquote>
<p>解析</p>
</blockquote>
<blockquote>
<ol>
<li>完成循环后，使用</li>
</ol>
<p>  ReturnExecuteSQL</p>
<p>  函数执行拼接好的SQL语句（SQLStr&amp;ProcessStr）并与1进行比较。如果返回值大于等于1，则执行以下操作：</p>
<ul>
<li>将屏幕项<code>&quot;AParttype&quot;</code>的文本内容清空。</li>
<li>弹出一个消息框显示”保存完成”。</li>
<li>将屏幕项<code>&quot;AParttype&quot;</code>的文本内容设置为变量<code>AParttype</code>的值。</li>
</ul>
<ol start="2">
<li>如果返回值小于1，则说明执行SQL操作失败，弹出一个消息框显示”保存失败，请联系管理员”，并显示错误描述（<code>err.description</code>）。</li>
</ol>
</blockquote>
<h3 id="5-Item-Visible-x3D-True"><a href="#5-Item-Visible-x3D-True" class="headerlink" title="5.Item.Visible &#x3D; True"></a>5.Item.Visible &#x3D; True</h3><blockquote>
<p><strong>这行代码是一个条件语句，用于判断Item对象的Visible属性是否为True。如果条件成立，即Item对象可见，那么下面的代码块将会执行。如果条件不成立，即Item对象不可见，那么下面的代码块将不会执行。</strong></p>
</blockquote>
<pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      <categories>
        <category>日记</category>
        <category>非标准自动化测试日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>非标准自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>非标准自动化测试工作日记----Day 2</title>
    <url>/2023/08/08/day2/</url>
    <content><![CDATA[<p><u><strong>-Day 2</strong></u><br><u><strong>author:  xizhao</strong></u></p>
<h1 id="CreateObject-“ADODB-RecordSet”"><a href="#CreateObject-“ADODB-RecordSet”" class="headerlink" title="CreateObject(“ADODB.RecordSet”)"></a>CreateObject(“ADODB.RecordSet”)</h1><pre class=" language-vbscript"><code class="language-vbscript">Set Rs = CreateObject("ADODB.RecordSet")

Set Rs = CreateObject("ADODB.RecordSet") 是vbs代码中用于创建一个ADODB.RecordSet对象的语句。下面是对该行代码的解释：

Set 是用于在vbs中将一个对象引用分配给一个变量的关键字。
Rs 是变量名，可以根据需要自定义，用于引用创建的ADODB.RecordSet对象。
CreateObject("ADODB.RecordSet") 是用于创建ADODB.RecordSet对象的语句。CreateObject 函数用于根据给定的 ProgID（程序标识符）创建指定类型的对象。在这里，它使用 “ADODB.RecordSet” 作为 ProgID 来创建 ADODB.RecordSet 对象。
创建 RecordSet 对象后，可以使用该对象来执行数据库操作，如执行查询语句、读取数据等。例如，可以使用 Rs.Open 方法打开记录集、使用 Rs.MoveFirst 方法移动到记录集的第一条记录等。
</code></pre>
<h1 id="CreateObject-“ADODB-Connection”"><a href="#CreateObject-“ADODB-Connection”" class="headerlink" title="CreateObject(“ADODB.Connection”)"></a>CreateObject(“ADODB.Connection”)</h1><pre class=" language-vbscript"><code class="language-vbscript">ADODB.Connection 对象用于建立与数据库的连接并执行数据库操作，如执行 SQL 查询、插入、更新、删除等操作。
</code></pre>
<h1 id="Rs-Open-SQLStr-Conn-1-1"><a href="#Rs-Open-SQLStr-Conn-1-1" class="headerlink" title="Rs.Open SQLStr,Conn,1,1"></a>Rs.Open SQLStr,Conn,1,1</h1><pre class=" language-vbscript"><code class="language-vbscript">对于 vbs 代码中的 Rs.Open SQLStr,Conn,1,1，这行代码是用于执行查询语句并打开记录集（RecordSet）。下面是对该行代码的解释：

Rs 是一个 RecordSet 对象，它用于存储从数据库中检索的数据。
Open 是 RecordSet 对象的一个方法，用于打开一个记录集。
SQLStr 是包含 SQL 查询语句的字符串变量，表示要执行的查询。
Conn 是一个 Connection 对象，表示与数据库的连接。
1,1 是 Rs.Open 方法的两个可选参数，它们分别表示打开记录集的类型和游标类型。具体含义如下：
第一个参数 1 表示打开记录集的类型为 adOpenKeyset（键集类型）。此类型在打开记录集时会将数据库中的键列复制到客户端，可以进行随机访问，例如可以使用 FindFirst 和 FindNext 方法进行定位和搜索。
第二个参数 1 表示游标类型为 adLockReadOnly（只读锁定类型）。此类型表示以只读方式锁定记录集，防止其他用户对记录集进行修改。
这行代码的作用是执行 SQLStr 中的查询语句，并将查询结果存储在 Rs 对象中，以供后续使用。
</code></pre>
<blockquote>
<p><code>Rs.MoveNext</code> 将记录集的指针移动到下一条记录</p>
</blockquote>
<blockquote>
<p><code>Rs.Close</code> 用于关闭结果集，释放占用的资源。</p>
</blockquote>
<blockquote>
<p>Rs.Eof 是 Recordset 对象的属性，用于判断结果集是否为空。</p>
</blockquote>
<h1 id="If-Not-Rs-Eof-And-Err-Number-x3D-0-Then"><a href="#If-Not-Rs-Eof-And-Err-Number-x3D-0-Then" class="headerlink" title="If Not Rs.Eof And Err.Number &#x3D; 0 Then"></a>If Not Rs.Eof And Err.Number &#x3D; 0 Then</h1><pre class=" language-vbscript"><code class="language-vbscript">这段代码用于检查结果集是否非空，并且是否没有产生错误。Rs.Eof 是 Recordset 对象的属性，用于判断结果集是否为空。Err.Number 用于检查是否有错误发生，0 表示没有错误。
</code></pre>
<h1 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h1><pre class=" language-vbscript"><code class="language-vbscript">Set Conn = GetADOConn() 和 Conn.Open 是一对vbs代码，用于获取连接对象并打开数据库连接。下面是对这两行代码的解释：

Set Conn = GetADOConn()

Set 是用于在vbs中将一个对象引用分配给一个变量的关键字。
Conn 是变量名，可以根据需要自定义，用于引用获取的数据库连接对象。
GetADOConn() 是一个自定义函数或方法，用于获取 ADO（ActiveX Data Objects）连接对象。根据代码中提供的信息，该函数应该返回一个有效的 ADO Connection 对象，并将其分配给变量 Conn。
Conn.Open

Conn 是先前代码中分配的 ADO Connection 对象的变量名。
Open 是 Connection 对象的一个方法，用于打开与数据库的连接。
通过以上代码，首先利用自定义的 GetADOConn() 函数获取到一个 ADO Connection 对象，并将其赋值给变量 Conn。然后使用 Conn.Open 方法打开数据库连接，使之处于可用状态。
</code></pre>
<h1 id="vbs连接数据库代码解析"><a href="#vbs连接数据库代码解析" class="headerlink" title="vbs连接数据库代码解析"></a>vbs连接数据库代码解析</h1><blockquote>
<p>源代码</p>
</blockquote>
<pre class=" language-vbscript"><code class="language-vbscript">Dim sPro,sSer,sCon,sDsn,DSNName
Dim conn

sPro = "Provider=SQLOLEDB.1;"
sDsn = "Integrated Security=SSPI;Persist Security Info=False;"
sSer = "Initial Catalog=DB_RBMES;Data Source=DESKTOP-R6URTMM\WINCC"'RBJF01

sCon = sPro & sDsn & sSer

Set conn = CreateObject("ADODB.Connection")
conn.ConnectionString = sCon
Set GetADOConn = conn

If Err.Number <> 0 Then
   MsgBox err.description
</code></pre>
<blockquote>
<p>解析</p>
</blockquote>
<pre class=" language-vbscript"><code class="language-vbscript">这段 vbs 代码主要是定义了一些变量以及获取 ADO 连接对象并设置连接字符串。下面是对代码的解释：

Dim sPro, sSer, sCon, sDsn, DSNName
Dim conn

sPro = "Provider=SQLOLEDB.1;"
sDsn = "Integrated Security=SSPI;Persist Security Info=False;"
sSer = "Initial Catalog=DB_RBMES;Data Source=DESKTOP-R6URTMM\WINCC"

sCon = sPro & sDsn & sSer
在这部分代码中，定义了一些字符串变量 sPro、sSer、sCon、sDsn、DSNName 用于存储连接字符串的不同部分。sPro 存储 Provider 信息，sSer 存储连接的数据库相关信息，sDsn 存储集成安全性等信息。然后通过拼接这些字符串变量，将它们组合成完整的连接字符串 sCon。

Set conn = CreateObject("ADODB.Connection")
conn.ConnectionString = sCon
Set GetADOConn = conn
这部分代码使用 CreateObject("ADODB.Connection") 创建了一个 ADO 连接对象 conn，然后将连接字符串 sCon 赋值给 conn.ConnectionString 属性，建立了与数据库的连接。

最后，通过 Set GetADOConn = conn 将连接对象 conn 返回，使得外部代码可以获取到这个连接对象。

If Err.Number <> 0 Then
   MsgBox Err.Description
这部分代码用于错误处理。检查 Err.Number 是否为非零值，如果有错误发生，则弹出一个消息框显示错误描述信息 Err.Description。

请注意，以上代码是一个示例，并假设有一个名为 GetADOConn 的自定义函数来获取连接对象。实际上，你可以根据自己的需求和数据库配置进行相应的修改和调整。
</code></pre>
<h1 id="释放资源，关闭数据库"><a href="#释放资源，关闭数据库" class="headerlink" title="释放资源，关闭数据库"></a>释放资源，关闭数据库</h1><pre class=" language-vbscript"><code class="language-vbscript">该段代码用于关闭数据库连接和释放相关资源，下面是对代码的解释：

Rs.Close
Set Rs = Nothing
Rs.Close 用于关闭结果集，释放占用的资源。Rs 是一个记录集对象，.Close 是该对象的方法。

Set Rs = Nothing 将记录集对象 Rs 设置为 Nothing，这样可以释放该对象占用的内存资源。

Conn.Close
Set Conn = Nothing
Conn.Close 用于关闭数据库连接。Conn 是一个 ADO 连接对象，.Close 是该对象的方法。

Set Conn = Nothing 将连接对象 Conn 设置为 Nothing，以释放连接对象所占用的内存资源。
</code></pre>
<h1 id="提供错误处理"><a href="#提供错误处理" class="headerlink" title="提供错误处理"></a>提供错误处理</h1><blockquote>
<p>代码</p>
</blockquote>
<pre class=" language-vbscript"><code class="language-vbscript">If Err.Number <> 0 Then
        MsgBox Err.Description & Chr(13) & Chr(10),,"Type"
    End If 
</code></pre>
<blockquote>
<p>解析</p>
</blockquote>
<pre class=" language-vbscript"><code class="language-vbscript">该段代码是用于检查是否发生了错误，并在发生错误时显示错误消息框。下面是对代码的解释：

If Err.Number <> 0 Then
    MsgBox Err.Description & Chr(13) & Chr(10), , "Type"
End If
If Err.Number <> 0 这个条件语句用于检查是否发生了错误。Err.Number 是一个系统定义的变量，用于表示最近发生的错误的错误代码。<> 是不等于的比较运算符。

如果发生了错误，也就是 Err.Number 的值不等于零，那么执行下面的代码块。

MsgBox 是一个用于显示消息框的函数。Err.Description 是一个系统定义的变量，用于获取最近发生的错误的描述信息。Chr(13) 和 Chr(10) 分别表示回车和换行，用于在消息框中添加换行符。最后一个参数 "Type" 是消息框的标题。

通过以上代码，如果在之前的数据库操作中发生了错误，会弹出一个消息框显示错误描述信息，并带有一个自定义的标题 “Type”。

这个代码段的目的是提供错误处理，以便在发生错误时能够及时发现并通知用户或记录错误信息，以便调试和维护代码。
</code></pre>
]]></content>
      <categories>
        <category>日记</category>
        <category>非标准自动化测试日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>非标准自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>非标准自动化测试工作日记----Day 3</title>
    <url>/2023/08/09/day3/</url>
    <content><![CDATA[<p><u><strong>-Day 3</strong></u><br><u><strong>author:  xizhao</strong></u></p>
<h1 id="TextMatrix"><a href="#TextMatrix" class="headerlink" title="TextMatrix"></a>TextMatrix</h1><blockquote>
<p>在 VBScript 中，<code>TextMatrix</code> 是一个用于访问和操作数据网格或表格的属性或方法。它通常用于获取或设置指定位置（行和列）的文本值。</p>
<p>具体而言，<code>TextMatrix</code> 是一种用于访问数据网格对象（如 FlexGrid）中单元格文本的方法。通过使用 <code>TextMatrix(row, col)</code>，你可以获取或设置指定 <code>row</code> 行和 <code>col</code> 列位置的文本值。</p>
<p>使用示例：</p>
</blockquote>
<pre class=" language-vbscript"><code class="language-vbscript">' 获取指定行和列位置的文本值
Dim value
value = DGList.TextMatrix(2, 3) ' 获取第 2 行，第 3 列的文本值

' 设置指定行和列位置的文本值
DGList.TextMatrix(5, 1) = "New Value" ' 设置第 5 行，第 1 列的文本值为 "New Value"
</code></pre>
<blockquote>
<p>在上述示例中，我们使用 <code>DGList.TextMatrix(2, 3)</code> 获取数据网格对象 <code>DGList</code> 中第 2 行第 3 列的文本值，并将其赋给变量 <code>value</code>。同样，我们也可以使用 <code>DGList.TextMatrix(5, 1)</code> 将特定位置的文本值设为 “New Value”。</p>
<blockquote>
<p>需要注意的是，在具体的代码中，<code>DGList</code> 是一个表示数据网格或表格的对象，而 <code>TextMatrix</code> 则是它的属性或方法，具体取决于所使用的组件或控件以及其文档中的定义。</p>
</blockquote>
</blockquote>
<h1 id="DGList-RowSel"><a href="#DGList-RowSel" class="headerlink" title="DGList.RowSel"></a>DGList.RowSel</h1><blockquote>
<blockquote>
<p><code>DGList.RowSel</code> 是一个表示数据网格控件（如 FlexGrid）当前所选行的属性。</p>
</blockquote>
<p>在该属性中，<code>DGList</code> 是表示数据网格控件的对象。<code>RowSel</code> 是该控件的属性，用于获取或设置当前所选行的索引值。</p>
<p>通过读取 <code>DGList.RowSel</code> 的值，你可以获取当前选中行的索引值，进而在需要的地方使用或处理该值。</p>
</blockquote>
<h1 id="DGList-TextMatrix-DGList-RowSel-0"><a href="#DGList-TextMatrix-DGList-RowSel-0" class="headerlink" title="DGList.TextMatrix(DGList.RowSel ,0)"></a>DGList.TextMatrix(DGList.RowSel ,0)</h1><blockquote>
<blockquote>
<p><code>DGList.TextMatrix(DGList.RowSel, 0)</code> 是一个在 VBScript 中用于获取数据网格控件（如 FlexGrid）中所选行（<code>RowSel</code>）的第一列（0 列）文本值的表达式。</p>
</blockquote>
<p>在该表达式中，<code>DGList</code> 表示数据网格控件的对象，<code>RowSel</code> 是该控件的属性，表示当前所选行的索引值。而数字 0 则代表第一列的索引（在 VBScript 中，数组索引从 0 开始）。</p>
<p>通过此表达式，可以获取到所选行的第一列的文本值，并将其用于后续操作。</p>
</blockquote>
<h1 id="MsgBox-“您确认要删除-”-PName-“-该零件信息吗？”-292-x3D-6"><a href="#MsgBox-“您确认要删除-”-PName-“-该零件信息吗？”-292-x3D-6" class="headerlink" title="MsgBox(“您确认要删除[” + PName + “]该零件信息吗？”,292) &#x3D; 6"></a>MsgBox(“您确认要删除[” + PName + “]该零件信息吗？”,292) &#x3D; 6</h1><blockquote>
<blockquote>
<p><code>MsgBox(&quot;您确认要删除[&quot; + PName + &quot;]该零件信息吗？&quot;, 292) = 6</code> 是一个用于显示带有确认按钮的消息框，并根据用户的选择返回一个值的代码。</p>
</blockquote>
<p>在该代码中，<code>MsgBox</code> 是用于显示消息框的函数，括号中的第一个参数是要显示的消息文本，第二个参数 292 表示消息框类型为具有确认和取消按钮的消息框。</p>
<p>根据返回值进行处理，数字 6 表示用户点击了确认按钮。因此，代码的意思是，如果用户点击了确认按钮，返回值为 6，则执行相应的删除操作。</p>
<p>同时，代码中还使用了字符串拼接，将变量 <code>PName</code> 的值嵌入到消息文本中。</p>
</blockquote>
<h1 id="DGList-ColAlignment-x3D-1"><a href="#DGList-ColAlignment-x3D-1" class="headerlink" title="DGList.ColAlignment &#x3D; 1"></a>DGList.ColAlignment &#x3D; 1</h1><blockquote>
<blockquote>
<p><code>DGList.ColAlignment = 1</code> 是一个用于设置数据网格控件（如 FlexGrid）中所有列的对齐方式的代码。</p>
</blockquote>
<p>在该代码中，<code>DGList</code> 表示数据网格控件的对象，<code>ColAlignment</code> 是该控件的属性，用于设置列的对齐方式。</p>
<p>数字 1 代表对齐方式为居中对齐。根据代码的设定，执行该语句后，数据网格中的所有列的内容将居中对齐显示。</p>
</blockquote>
<h1 id="CInt-函数"><a href="#CInt-函数" class="headerlink" title="CInt  函数"></a>CInt  函数</h1><blockquote>
<p><code>CInt</code> 是一个函数，用于将给定的表达式（expression）转换为整数类型（integer）。</p>
<p><code>CInt(expression)</code> 中的 <code>expression</code> 可以是任何合法的表达式，包括数字、字符串或变量。该函数会尝试将 <code>expression</code> 转换为整数类型，并返回转换后的整数值。如果无法进行有效的转换，将引发错误。</p>
<p>下面是一些示例使用 <code>CInt</code> 函数的情况：</p>
</blockquote>
<pre class=" language-vbscript"><code class="language-vbscript">Dim num As Integer
num = CInt(10.5) ' 将浮点数 10.5 转换为整数 10

Dim str As String
str = "123"
num = CInt(str) ' 将字符串 "123" 转换为整数 123

Dim invalid As String
invalid = "ABC"
num = CInt(invalid) ' 无法将字符串 "ABC" 转换为整数，将引发错误
</code></pre>
<blockquote>
<p>需要注意的是，在进行类型转换时，<code>CInt</code> 函数会对表达式进行取整操作，即舍去小数部分。</p>
</blockquote>
<h1 id="VBScript-符号"><a href="#VBScript-符号" class="headerlink" title="VBScript 符号"></a>VBScript 符号</h1><pre class=" language-vbscript"><code class="language-vbscript">vbCrlf 表示换行符和回车符的组合。
Chr(10) 和 Chr(13) 是特殊字符，分别表示换行符和回车符。
</code></pre>
<h1 id="Wincc—VBScript-变量读写【异步-x2F-同步】"><a href="#Wincc—VBScript-变量读写【异步-x2F-同步】" class="headerlink" title="Wincc—VBScript 变量读写【异步&#x2F;同步】"></a>Wincc—VBScript 变量读写【异步&#x2F;同步】</h1><blockquote>
<p>异步读: <code>read()</code></p>
<blockquote>
<p>理解：相当于有“缓存区” <code>【映像区】</code>  读取变量时，第一次读取数据先读取AS系统中的数据，后面映像区<code>周期性（触发周期/2）</code>的从AS系统请求数据。在次读取数据时，直接从“缓存区”中读取变量。</p>
</blockquote>
<p>同步读: <code>read(1)</code></p>
<p>理解：直接从AS系统中读取数据。</p>
</blockquote>
]]></content>
      <categories>
        <category>日记</category>
        <category>非标准自动化测试日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>非标准自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>非标准自动化测试工作日记----Day 4</title>
    <url>/2023/08/10/day4/</url>
    <content><![CDATA[<p><u><strong>-Day 4</strong></u><br><u><strong>author:  xizhao</strong></u></p>
<h2 id="VBScript：Set关键字"><a href="#VBScript：Set关键字" class="headerlink" title="VBScript：Set关键字"></a>VBScript：Set关键字</h2><blockquote>
<p>在 VBScript 中，如果你希望在函数中返回一个对象引用或一个对象变量，你需要使用 <code>Set</code> 关键字。</p>
<p>如果你想返回的是一个原始类型的值（例如字符串、数值、布尔值等），则不需要使用 <code>Set</code> 关键字。</p>
<p>以下是一些示例，说明何时需要使用 <code>Set</code> 关键字：</p>
</blockquote>
<blockquote>
<ol>
<li>返回一个对象引用：</li>
</ol>
</blockquote>
<pre class=" language-vbscript"><code class="language-vbscript">Function GetObjectReference()
    Dim obj
    Set obj = CreateObject("SomeObject")
    Set GetObjectReference = obj  ' 返回一个对象引用时需要使用 Set
End Function
</code></pre>
<blockquote>
<ol start="2">
<li>返回原始类型的值：</li>
</ol>
</blockquote>
<pre class=" language-vbscript"><code class="language-vbscript">Function GetPrimitiveValue()
    GetPrimitiveValue = "Hello, World!"  ' 返回一个字符串字面量，不需要使用 Set
End Function
</code></pre>
<blockquote>
<p>在函数中使用 <code>Set</code> 关键字可以确保对象引用被正确地分配和返回。</p>
<blockquote>
<p>需要注意的是，在 VBScript 中，函数可以返回对象引用或原始类型的值，但不支持返回数组。如果要返回多个值，可以使用 <code>ByRef</code> 参数来传递引用，或者将多个值封装到一个对象中进行返回。</p>
</blockquote>
</blockquote>
<h2 id="Set-GetADOConnData-x3D-conn-Set-Conn-x3D-GetADOConnData"><a href="#Set-GetADOConnData-x3D-conn-Set-Conn-x3D-GetADOConnData" class="headerlink" title="Set GetADOConnData &#x3D; conn        Set Conn&#x3D;GetADOConnData()"></a>Set GetADOConnData &#x3D; conn        Set Conn&#x3D;GetADOConnData()</h2><blockquote>
<blockquote>
<p>Set GetADOConnData &#x3D; conn  </p>
</blockquote>
<p>将连接对象<code>conn</code>返回给<code>函数调用者</code>，通过<code>Set GetADOConnData = conn</code>。就好像是，有返回值的函数。可以理解为JAVA中的有返回值的函数和无返回值的函数的区别。</p>
<p>加了这段代码，在VBScript中就是有返回值的函数。</p>
<blockquote>
<p>Set Conn&#x3D;GetADOConnData()</p>
</blockquote>
<p>将 <code>GetADOConnData()</code> 函数返回的<code>对象</code>赋值给变量 <code>Conn</code>。</p>
</blockquote>
<h2 id="VBScript中的函数返回："><a href="#VBScript中的函数返回：" class="headerlink" title="VBScript中的函数返回："></a>VBScript中的函数返回：</h2><pre class=" language-vbscript"><code class="language-vbscript">function GetADOConnData（）

。。。

Set GetADOConnData = conn          `这里相当于，java中的return conn;

。。。

end function



function GetValueFromDB（）

。。。

Set Conn=GetADOConnData()       `这里就是在调用GetADOConnData() 并将该函数的返回值，赋予Conn对象；

。。。

end function
</code></pre>
<h2 id="执行一次SQL语句，并返回受影响的行"><a href="#执行一次SQL语句，并返回受影响的行" class="headerlink" title="执行一次SQL语句，并返回受影响的行"></a>执行一次SQL语句，并返回受影响的行</h2><blockquote>
<p>代码：</p>
</blockquote>
<pre class=" language-vbscript"><code class="language-vbscript">'执行一次SQL语句,并返回影响的行
Function ReturnExecuteSQL(Byval SQL) 
    On Error Resume Next 
   
    Dim Conn,RowCount
    RowCount = -1
    Set Conn = GetADOConn()
    Conn.Open
    Conn.Execute SQL,RowCount,&H0001
    Conn.Close: Set Conn = Nothing
    
    If Err.Number <> 0 Then
        Err.Claer
    End If 
    ReturnExecuteSQL = RowCount
End Function
</code></pre>
<blockquote>
<p>主要语句解析：</p>
</blockquote>
<blockquote>
<p><code>Conn.Execute SQL, RowCount, &amp;H0001</code> 是用于执行 SQL 查询的语句。让我们详细解释一下每个参数的含义：</p>
<ul>
<li><code>Conn</code>：表示要执行查询的数据库连接对象。</li>
<li><code>SQL</code>：包含要执行的 SQL 查询的字符串。</li>
<li><code>RowCount</code>：用于返回执行查询后影响的行数。在该代码中，<code>RowCount</code> 是一个变量，将被传递给 <code>Execute</code> 方法以返回查询结果。</li>
<li><code>&amp;H0001</code>：这是一个常量，用于指定游标类型。在代码中，<code>&amp;H0001</code> 对应键控游标（adOpenKeyset）。</li>
</ul>
<p>综上所述，该行代码的作用是使用给定的连接对象 <code>Conn</code> 执行 SQL 查询，并将执行结果中的影响行数存储到 <code>RowCount</code> 变量中。查询的结果不会被返回，只是用于获取影响行数。</p>
<blockquote>
<p>需要注意的是，常量值 <code>&amp;H0001</code> 指定了键控游标，这意味着查询的结果集是可滚动的，并且通过关键字段索引。如果你需要其他类型的游标，可以选择适合你需求的常量值。</p>
</blockquote>
<p><code>ReturnExecuteSQL = RowCount</code> 是将影响的行数作为函数的返回值。</p>
</blockquote>
]]></content>
      <categories>
        <category>日记</category>
        <category>非标准自动化测试日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>非标准自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>typora-vue-theme主题介绍</title>
    <url>/2023/08/03/test/</url>
    <content><![CDATA[<h1 id="hexo-theme-matery"><a href="#hexo-theme-matery" class="headerlink" title="hexo-theme-matery"></a>hexo-theme-matery</h1><blockquote>
<p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p>
</blockquote>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>简单漂亮，文章内容美观易读</li>
<li><a href="https://material.io/">Material Design</a> 设计</li>
<li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li>
<li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li>
<li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li>
<li>时间轴式的归档页</li>
<li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li>
<li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li>
<li>可自定义的数据的友情链接页面</li>
<li>支持文章置顶和文章打赏</li>
<li>支持 <code>MathJax</code></li>
<li>支持中文繁简转换</li>
<li><code>TOC</code> 目录</li>
<li>可设置复制文章内容时追加版权信息</li>
<li>可设置阅读文章时做密码验证</li>
<li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li>
<li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li>
<li>支持在首页的音乐播放和视频播放功能</li>
<li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li>
<li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li>
</ul>
<h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p>
<ul>
<li><a href="https://github.com/HarborZeng">@HarborZeng</a></li>
<li><a href="https://github.com/shw2018">@shw2018</a></li>
<li><a href="https://github.com/L1cardo">@L1cardo</a></li>
<li><a href="https://github.com/Five-great">@Five-great</a></li>
</ul>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p>
<p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p>
<p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git
</code></pre>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p>
<h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul>
<li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li>
<li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li>
<li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li>
</ul>
<h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>
<pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span>
</code></pre>
<p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> categories
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span>
<span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span>
<span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span>
<span class="token punctuation">---</span>
</code></pre>
<h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>
<pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span>
</code></pre>
<p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> tags
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span>
<span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span>
<span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span>
<span class="token punctuation">---</span>
</code></pre>
<h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>
<pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span>
</code></pre>
<p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> about
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span>
<span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span>
<span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span>
<span class="token punctuation">---</span>
</code></pre>
<h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>
<pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span>
</code></pre>
<p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> contact
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span>
<span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span>
<span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span>
<span class="token punctuation">---</span>
</code></pre>
<blockquote>
<p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p>
</blockquote>
<h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>
<pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span>
</code></pre>
<p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> friends
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span>
<span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span>
<span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span>
<span class="token punctuation">---</span>
</code></pre>
<p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>
    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>
    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>
    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>
    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>
    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>
    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span>
</code></pre>
<h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个。编辑你刚刚新建的页面文件 <code>/source/404.md</code>，至少需要以下内容：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span>
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span>
<span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span>
<span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span>
<span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span>
<span class="token punctuation">---</span>
</code></pre>
<h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">Index</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home
  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags
  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark
  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive
  <span class="token key atrule">About</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle
  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book
</code></pre>
<h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p>
<ol>
<li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li>
<li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li>
<li>注意每个二级菜单模块前要加 <code>-</code>.     </li>
<li>注意缩进格式</li>
</ol>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">Index</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home
  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags
  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark
  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive
  <span class="token key atrule">About</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o
  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book
  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list
    <span class="token key atrule">children</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music
        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music
        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies
        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies
        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books
        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books
        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries
        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries
        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image
</code></pre>
<h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p>
<p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p>
<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>
  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">prismjs</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>
</code></pre>
<p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save
</code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml
  <span class="token key atrule">field</span><span class="token punctuation">:</span> post
</code></pre>
<h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p>
<p>安装命令如下：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save
</code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span>
</code></pre>
<blockquote>
<p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p>
</blockquote>
<h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p>
<p>安装命令如下：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount
</code></pre>
<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>
  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>
  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>
  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读时长.</span>
  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读次数.</span>
</code></pre>
<h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save
</code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji
  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">styles</span><span class="token punctuation">:</span>
  <span class="token key atrule">customEmojis</span><span class="token punctuation">:</span>
</code></pre>
<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p>
<h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save
</code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom
  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml
  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>
  <span class="token key atrule">hub</span><span class="token punctuation">:</span>
  <span class="token key atrule">content</span><span class="token punctuation">:</span>
  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>
  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>
  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date
</code></pre>
<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p>
<h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p>
<h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p>
<h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p>
<h3 id="添加中文繁简转换"><a href="#添加中文繁简转换" class="headerlink" title="添加中文繁简转换"></a>添加中文繁简转换</h3><p>在主题的 <code>_config.yml</code> 文件中，开启 translate 为 enable。</p>
<blockquote>
<p>开启中文繁简转换如下修改。默认不开启。<br>实例演示： <a href="https://blog.17lai.site/">繁简转换</a> 底下 footer 栏</p>
</blockquote>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">translate</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre>
<h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">&amp;#123;</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">&amp;#125;</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
</code></pre>
<p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p>
<ul>
<li>Facebook: <code>fab fa-facebook</code></li>
<li>Twitter: <code>fab fa-twitter</code></li>
<li>Google-plus: <code>fab fa-google-plus</code></li>
<li>Linkedin: <code>fab fa-linkedin</code></li>
<li>Tumblr: <code>fab fa-tumblr</code></li>
<li>Medium: <code>fab fa-medium</code></li>
<li>Slack: <code>fab fa-slack</code></li>
<li>Sina Weibo: <code>fab fa-weibo</code></li>
<li>Wechat: <code>fab fa-weixin</code></li>
<li>QQ: <code>fab fa-qq</code></li>
<li>Zhihu: <code>fab fa-zhihu</code></li>
</ul>
<blockquote>
<p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p>
</blockquote>
<h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p>
<h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐</span>
<span class="token key atrule">music</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">title</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 非吸底模式有效</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐
  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment" spellcheck="true"># require music platform: netease, tencent, kugou, xiami, baidu</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment" spellcheck="true"># require song, playlist, album, search, artist</span>
  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841     </span><span class="token comment" spellcheck="true"># require song id / playlist id / album id / search keyword</span>
  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false      </span><span class="token comment" spellcheck="true"># 开启吸底模式</span>
  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true"># 是否自动播放</span>
  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>
  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>
  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>
  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>
  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7       </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>
  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 列表默认折叠</span>
</code></pre>
<blockquote>
<p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p>
<p><code>baidu</code>（百度音乐）。</p>
<p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p>
<p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p>
<p>即为这串数字。</p>
</blockquote>
<h3 id="添加note"><a href="#添加note" class="headerlink" title="添加note"></a>添加note</h3><blockquote>
<p><a href="https://blog.17lai.site/posts/cf0f47fd/#tag-note">演示</a></p>
</blockquote>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><pre><code>&#123;% note [class] [no-icon] [summary] %&#125;
Any content (support inline tags too).
&#123;% endnote %&#125;
</code></pre>
<ul>
<li><code>[class]</code> : <em>Optional parameter.</em> Supported values: default | primary | success | info | warning | danger.</li>
<li><code>[no-icon]</code> : <em>Optional parameter.</em> Disable icon in note.</li>
<li><code>[summary]</code> : <em>Optional parameter.</em> Optional summary of the note.</li>
</ul>
<p>All parameters are optional.</p>
<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><pre><code>&#123;% note %&#125;
#### Header
(without define class style)
&#123;% endnote %&#125;
</code></pre>
<h3 id="添加button"><a href="#添加button" class="headerlink" title="添加button"></a>添加button</h3><blockquote>
<p><a href="https://blog.17lai.site/posts/cf0f47fd/#tag-button">演示</a></p>
</blockquote>
<h4 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h4><pre><code>&#123;% button url, text, icon [class], [title] %&#125;
</code></pre>
<p>or</p>
<pre><code>&#123;% btn url, text, icon [class], [title] %&#125;
</code></pre>
<ul>
<li><code>url</code> : Absolute or relative path to URL.</li>
<li><code>text</code> : Button text. Required if no icon specified.</li>
<li><code>icon</code> : Font Awesome icon name. Required if no text specified.</li>
<li><code>[class]</code> : <em>Optional parameter.</em> Font Awesome class(es): <code>fa-fw</code> | <code>fa-lg</code> | <code>fa-2x</code> | <code>fa-3x</code> | <code>fa-4x</code> | <code>fa-5x</code></li>
<li><code>[title]</code> : <em>Optional parameter.</em> Tooltip at mouseover.</li>
</ul>
<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><pre><code>&#123;% button #, Text %&#125;
</code></pre>
<h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>
<table>
<thead>
<tr>
<th>配置选项</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td><code>Markdown</code> 的文件标题</td>
<td>文章标题，强烈建议填写此选项</td>
</tr>
<tr>
<td>date</td>
<td>文件创建时的日期时间</td>
<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>
</tr>
<tr>
<td>author</td>
<td>根 <code>_config.yml</code> 中的 <code>author</code></td>
<td>文章作者</td>
</tr>
<tr>
<td>img</td>
<td><code>featureImages</code> 中的某个值</td>
<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>
</tr>
<tr>
<td>top</td>
<td><code>true</code></td>
<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>
</tr>
<tr>
<td>hide</td>
<td><code>false</code></td>
<td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td>
</tr>
<tr>
<td>cover</td>
<td><code>false</code></td>
<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>
</tr>
<tr>
<td>coverImg</td>
<td>无</td>
<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>
</tr>
<tr>
<td>password</td>
<td>无</td>
<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>
</tr>
<tr>
<td>toc</td>
<td><code>true</code></td>
<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>
</tr>
<tr>
<td>mathjax</td>
<td><code>false</code></td>
<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>
</tr>
<tr>
<td>summary</td>
<td>无</td>
<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>
</tr>
<tr>
<td>categories</td>
<td>无</td>
<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>
</tr>
<tr>
<td>tags</td>
<td>无</td>
<td>文章标签，一篇文章可以多个标签</td>
</tr>
<tr>
<td>keywords</td>
<td>文章标题</td>
<td>文章关键字，SEO 时需要</td>
</tr>
<tr>
<td>reprintPolicy</td>
<td>cc_by</td>
<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>注意</strong>:</p>
<ol>
<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li>
<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>
<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li>
<li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li>
</ol>
</blockquote>
<p>以下为文章的 <code>Front-matter</code> 示例。</p>
<h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span>
<span class="token punctuation">---</span>
</code></pre>
<h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇
<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg
<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92
<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要
<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> Typora
  <span class="token punctuation">-</span> Markdown
<span class="token punctuation">---</span>
</code></pre>
<h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p>
<p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p>
<p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p>
<p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p>
<p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p>
<h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p>
<ul>
<li>菜单</li>
<li>我的梦想</li>
<li>首页的音乐播放器和视频播放器配置</li>
<li>是否显示推荐文章名称和按钮配置</li>
<li><code>favicon</code> 和 <code>Logo</code></li>
<li>个人信息</li>
<li>TOC 目录</li>
<li>文章打赏信息</li>
<li>复制文章内容时追加版权信息</li>
<li>MathJax</li>
<li>文章字数统计、阅读时长</li>
<li>点击页面的’爱心’效果</li>
<li>我的项目</li>
<li>我的技能</li>
<li>我的相册</li>
<li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li>
<li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li>
<li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li>
</ul>
<p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p>
<h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p>
<pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span>
<span class="token number">.</span>bg-color &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

<span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow &amp;#123<span class="token punctuation">;</span></span>
   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

<span class="token atrule"><span class="token rule">@keyframes</span> rainbow &amp;#123<span class="token punctuation">;</span></span>
    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p>
<h2 id="版本变更记录"><a href="#版本变更记录" class="headerlink" title="版本变更记录"></a>版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/CHANGELOG.md">CHANGELOG.md</a></p>
<h2 id="更多部署方式"><a href="#更多部署方式" class="headerlink" title="更多部署方式"></a>更多部署方式</h2><blockquote>
<p>Jsdelivr 已经被封了，这两个可以加速访问快一点</p>
</blockquote>
<h3 id="vercel-部署"><a href="#vercel-部署" class="headerlink" title="vercel 部署"></a><a href="https://blog.17lai.site/posts/5311b619/#vercel-%E9%83%A8%E7%BD%B2">vercel 部署</a></h3><h3 id="cloudflare-Pages-部署"><a href="#cloudflare-Pages-部署" class="headerlink" title="cloudflare Pages 部署"></a><a href="https://blog.17lai.site/posts/5311b619/#cloudflare-Pages-%E9%83%A8%E7%BD%B2">cloudflare Pages 部署</a></h3>]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/xizhao/</url>
    <content><![CDATA[<h1 id="你好，欢迎来到-xizhao’s-blog。"><a href="#你好，欢迎来到-xizhao’s-blog。" class="headerlink" title="你好，欢迎来到 xizhao’s blog。"></a>你好，欢迎来到 xizhao’s blog。</h1><p><img src="/images/2.jpg"></p>
]]></content>
      <categories>
        <category>公告</category>
      </categories>
      <tags>
        <tag>公告</tag>
      </tags>
  </entry>
</search>
